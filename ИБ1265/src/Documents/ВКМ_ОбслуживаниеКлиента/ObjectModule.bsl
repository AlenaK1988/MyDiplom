#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда 
	
#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	//++Диплом
	Если Договор.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
		ТекстСообщения = СтрШаблон("У договора %1 указан вид договора %2. Необходимо выбрать другой договор с видом абонентское обслуживание", 
			Договор.Наименование, Договор.ВидДоговора);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Договор);
		Отказ = Истина;
		//Возврат;
	КонецЕсли;
	
	Если Дата < Договор.ВКМ_ДатаНачалаДействияДоговора Тогда
		ТекстСообщения = "Дата документа раньше даты начала действия договора";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
		//Возврат;
	Иначе
		Если Дата > Договор.ВКМ_ДатаОкончанияДействияДоговора Тогда
			ТекстСообщения = "Дата документа позже даты окончания действия договора";
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Отказ = Истина;
			//Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
		|ИЗ
		|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&ДатаДокумента, ) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|ГДЕ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник = &Сотрудник";
	
	
	Запрос.УстановитьПараметр("ДатаДокумента", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не найдены записи в регистре сведений");
		Отказ = Ложь;
		
	Иначе 
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
			
			Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
			
			Для Каждого ТекСтрока Из ВыполненныеРаботы Цикл 
				// регистр ВКМ_ВыполненныеКлиентуРаботы
				Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
				
				ОплатаРабот = ТекСтрока.ЧасыКОплатеКлиенту * Договор.ВКМ_СтоимостьЧасаРабот;
				Движение.Период = Дата;
				Движение.Клиент = Клиент;
				Движение.Договор = Договор;
				Движение.КоличествоЧасов = ТекСтрока.ЧасыКОплатеКлиенту;
				Движение.СуммаКОплате = ОплатаРабот;
				
				// регистр ВКМ_ВыполненныеСотрудникомРаботы 
				Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
				Движение.Период = Дата;
				Движение.Сотрудник = Специалист;
				Движение.ЧасовКОплате = ТекСтрока.ЧасыКОплатеКлиенту;
				Движение.СуммаКОплате = ОплатаРабот * Выборка.ПроцентОтРабот / 100;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!

	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//конец
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	//++Диплом
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтоНовый() Тогда
		НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		НоваяЗапись.ТекстСообщения = СтрШаблон("Создан новый документ Обслуживание клиента: Дата - %1, 
		|Клиент - %2, специалист - %3, время проведения работ с %4 по %5", Дата, Клиент, Специалист, ВремяНачалаРаботПлан,
		ВремяОкончанияРаботПлан);
		НоваяЗапись.Записать();
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.Дата КАК Дата,
		|	ВКМ_ОбслуживаниеКлиента.Специалист КАК Специалист,
		|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
		|	ВКМ_ОбслуживаниеКлиента.ВремяНачалаРаботПлан КАК ВремяНачалаРаботПлан,
		|	ВКМ_ОбслуживаниеКлиента.ВремяОкончанияРаботПлан КАК ВремяОкончанияРаботПлан
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка"; 
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДатаДок = Выборка.Дата;
			СпециалистДок = Выборка.Специалист;
			ДатаПроведенияРаботДок = Выборка.ДатаПроведенияРабот;
			ВремяНачалаДок = Выборка.ВремяНачалаРаботПлан;
			ВремяОкончанияДок = Выборка.ВремяОкончанияРаботПлан;
		КонецЦикла;
		
		Если ДатаДок <> Дата Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("В документе Обслуживание клиента №%1 изменилась дата документа на %2", Номер, Дата);
			НоваяЗапись.Записать();	
		ИначеЕсли
			СпециалистДок <> Специалист Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("В документе Обслуживание клиента №%1 от %2 изменился специалист, новый: %3", Номер, Дата, Специалист);
			НоваяЗапись.Записать();
		ИначеЕсли
			ДатаПроведенияРаботДок <> ДатаПроведенияРабот Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("В документе Обслуживание клиента №%1 от %2 изменилась дата проведения работ на %3", Номер, Дата, ДатаПроведенияРабот);
			НоваяЗапись.Записать();
		ИначеЕсли
			ВремяНачалаДок <> ВремяНачалаРаботПлан Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("В документе Обслуживание клиента №%1 от %2 изменилось время начала проведения работ на %3", Номер, Дата, ВремяНачалаРаботПлан);
			НоваяЗапись.Записать();		
		ИначеЕсли
			ВремяОкончанияДок <> ВремяОкончанияРаботПлан Тогда
			НоваяЗапись = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НоваяЗапись.ТекстСообщения = СтрШаблон("В документе Обслуживание клиента №%1 от %2 изменилось время окончания проведения работ на %3", Номер, Дата, ВремяОкончанияРаботПлан);
			НоваяЗапись.Записать();
		КонецЕсли;	
		
	КонецЕсли;                  
	//конец
КонецПроцедуры

#КонецОбласти 

#КонецЕсли
